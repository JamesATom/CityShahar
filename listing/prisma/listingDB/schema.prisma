generator client {
  provider = "prisma-client-js"
  output = "../listingDB-client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LISTING")
}

model PropertyOwner {
  id         Int        @id @default(autoincrement())
  firstName  String
  lastName   String
  roleId     Int
  avatarUrl  String?
  avatarSet  Json?
  properties Property[]
  role       Role       @relation(fields: [roleId], references: [id])
}

model Role {
  id             Int             @id @default(autoincrement())
  key            String
  name           Json
  propertyOwners PropertyOwner[]
}

model Property {
  id                  Int               @id @default(autoincrement())
  viewName            Json
  boardName           Json
  categoryId          Int
  statusKey           String
  routeKey            String
  price               Json
  priceByUnit         Json?
  unit                String
  currency            String
  description         Json
  addressId           Int
  phone               String
  videoLink           String?
  viewCount           Int
  isCommissioned      Boolean
  imageSetsId         Int
  generalAttributesId Int
  propertyOwnerId     Int
  isFavorite          Boolean
  isHidden            Boolean
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  publishedAt         DateTime?
  address             Address           @relation(fields: [addressId], references: [id])
  category            Category          @relation(fields: [categoryId], references: [id])
  generalAttributes   GeneralAttributes @relation(fields: [generalAttributesId], references: [id])
  imageSet            ImageSet          @relation(fields: [imageSetsId], references: [id])
  propertyOwner       PropertyOwner     @relation(fields: [propertyOwnerId], references: [id])
}

model Category {
  id         Int        @id @default(autoincrement())
  typeId     Int
  name       Json
  type       Type       @relation(fields: [typeId], references: [id])
  properties Property[]
}

model Type {
  id            Int        @id @default(autoincrement())
  key           String
  name          Json
  secondaryName Json
  totalCount    Int
  children      Json
  categories    Category[]
}

model Address {
  id              Int        @id @default(autoincrement())
  area            Json
  house           Json
  geoLocation     Json
  fullAddress     Json
  metros          Json
  addressRouteKey String
  addressTypeKey  String
  districtId      Int?
  regionId        Int?
  district        District?  @relation(fields: [districtId], references: [id])
  region          Region?    @relation(fields: [regionId], references: [id])
  properties      Property[]
}

model Region {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  addresses Address[]
  districts District[]
}

model District {
  id        Int       @id @default(autoincrement())
  name      String
  regionId  Int
  addresses Address[]
  regions   Region    @relation(fields: [regionId], references: [id])
}

model ImageSet {
  id         Int        @id @default(autoincrement())
  images     Json
  properties Property[]
}

model GeneralAttributes {
  id        Int      @id @default(autoincrement())
  attributes Json
  properties Property[]
}